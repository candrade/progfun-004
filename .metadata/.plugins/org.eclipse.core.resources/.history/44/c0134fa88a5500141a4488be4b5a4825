package patmat

object incrtest {
  def replace[T](comparator: (T, T) => Boolean)(x: T, xs: List[T]): List[T] = xs match {
    case List() => List(x)
    case y :: ys => {
      if (comparator(x, y)) x :: ys
      else y :: replace(comparator)(x, ys)
    }
  }                                               //> replace: [T](comparator: (T, T) => Boolean)(x: T, xs: List[T])List[T]
	
	def findCount(c: Char, list: List[(Char, Int)]): Int = list match {
		case Nil => 0
		case x :: xs => if (c == x._1) x._2 else findCount(c, xs)
	}                                         //> findCount: (c: Char, list: List[(Char, Int)])Int
	
	def countListReplace = replace[(Char, Int)]((c1, c2) => c1._1 == c2._1) _
                                                  //> countListReplace: => ((Char, Int), List[(Char, Int)]) => List[(Char, Int)]
	def count(x: Char, xs: List[Char], acc: List[(Char, Int)]): List[(Char, Int)] = xs match {
		case Nil => countListReplace((x, findCount(x, acc) + 1), acc)
		case y :: ys => count(y, ys, countListReplace((x, findCount(x, acc) + 1), acc))
	}                                         //> count: (x: Char, xs: List[Char], acc: List[(Char, Int)])List[(Char, Int)]
	
	def times(chars: List[Char]): List[(Char, Int)] = chars match {
  	case Nil => List()
  	case x :: xs => count(x, xs, List())
  }                                               //> times: (chars: List[Char])List[(Char, Int)]

	times(List('a','a','a','b'))              //> res0: List[(Char, Int)] = List((a,3), (b,1))
}